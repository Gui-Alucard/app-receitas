{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","id","xmlns","viewBox","height","d","fill","vectorEffect","strokeWidth","stroke","strokeLinejoin","strokeLinecap","strokeMiterlimit","opacity","fillRule","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yPA8BeA,MA3Bf,WACE,OACE,yBAAKC,GAAG,SACN,uCACA,yBAAKC,MAAM,6BAA6BD,GAAG,aAAaE,QAAQ,gCAAgCC,OAAO,SACrG,0BAAMC,EAAE,wEAAwEC,KAAK,mBAAmBC,aAAa,qBAAqBC,YAAY,QAAQC,OAAO,gBAAgBC,eAAe,QAAQC,cAAc,OAAOC,iBAAiB,MAClP,uBAAGC,QAAQ,OACT,0BAAMR,EAAE,sFAAsFC,KAAK,mBAErG,uBAAGL,GAAG,WACJ,0BAAMI,EAAE,qFAAqFC,KAAK,qBAClG,0BAAMD,EAAE,qFAAqFC,KAAK,oBAClG,0BAAMD,EAAE,qFAAqFC,KAAK,sBAEpG,uBAAGL,GAAG,YACJ,0BAAMI,EAAE,+EAA+EC,KAAK,qBAC5F,0BAAMD,EAAE,gFAAgFC,KAAK,oBAC7F,0BAAMD,EAAE,kFAAkFC,KAAK,sBAEjG,uBAAGO,QAAQ,OACT,0BAAMR,EAAE,ojBAAojBS,SAAS,UAAUR,KAAK,yBCX1kBS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f2fb1510.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div id=\"meals\">\n      <span>TRYBE</span>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" id=\"rocksGlass\" viewBox=\"-8.233 -8.233 122.466 122.466\" height=\"300px\">\n        <path d=\" M 12.556 103 L 3 3 L 103 3 L 93.347 103 L 12.556 103 L 12.556 103 Z \" fill=\"rgb(255,255,255)\" vectorEffect=\"non-scaling-stroke\" strokeWidth=\"5.616\" stroke=\"rgb(70,70,70)\" strokeLinejoin=\"miter\" strokeLinecap=\"butt\" strokeMiterlimit=\"4\" />\n        <g opacity=\"0.8\">\n          <path d=\" M 12.251 56.089 L 93.751 56.089 L 88.851 98.111 L 17.351 98.111 L 12.251 56.089 Z \" fill=\"rgb(147,72,3)\" />\n        </g>\n        <g id=\"iceLeft\">\n          <path d=\" M 46.751 81.733 L 27.662 84.671 L 16.662 65.618 L 35.751 62.68 L 46.751 81.733 Z \" fill=\"rgb(187,222,251)\" />\n          <path d=\" M 46.751 81.733 L 58.839 66.671 L 47.839 47.618 L 35.751 62.68 L 46.751 81.733 Z \" fill=\"rgb(33,150,243)\" />\n          <path d=\" M 16.662 65.618 L 28.751 50.556 L 47.839 47.618 L 35.751 62.68 L 16.662 65.618 Z \" fill=\"rgb(144,202,249)\" />\n        </g>\n        <g id=\"iceRight\">\n          <path d=\" M 61.218 92.7 L 45.643 81.28 L 51.337 60.03 L 66.912 71.45 L 61.218 92.7 Z \" fill=\"rgb(187,222,251)\" />\n          <path d=\" M 61.218 92.7 L 80.416 90.598 L 86.11 69.347 L 66.912 71.45 L 61.218 92.7 Z \" fill=\"rgb(33,150,243)\" />\n          <path d=\" M 51.337 60.03 L 70.535 57.927 L 86.11 69.347 L 66.912 71.45 L 51.337 60.03 Z \" fill=\"rgb(144,202,249)\" />\n        </g>\n        <g opacity=\"0.5\">\n          <path d=\" M 89.776 14.76 C 88.039 14.687 86.398 15.71 86.301 17.098 L 86.012 21.188 C 85.915 22.576 87.266 23.745 89.1 23.818 L 89.293 23.818 C 91.031 23.818 92.479 22.795 92.575 21.408 L 92.865 17.317 C 93.058 16.002 91.707 14.833 89.776 14.76 L 89.776 14.76 Z  M 88.714 29.077 C 86.88 29.004 85.336 30.027 85.239 31.415 L 80.703 91.24 L 23.56 91.24 C 21.726 91.24 20.181 92.335 20.181 93.796 C 20.181 95.257 21.629 96.353 23.56 96.353 L 83.888 96.353 C 85.625 96.353 87.073 95.33 87.17 93.942 L 91.9 31.707 C 91.996 30.392 90.548 29.15 88.714 29.077 L 88.714 29.077 Z \" fillRule=\"evenodd\" fill=\"rgb(162,162,162)\" />\n        </g>\n      </svg>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}